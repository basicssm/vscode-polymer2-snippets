{
  "Polymer Custom Element": {
    "prefix": "p-customelement",
    "description": "Polymer custom element",
    "body": [
      "class ${1:Name}Element extends Polymer.Element {",
      "",
      "\tstatic get is() { return '${1:Name}-element'; }",
      "",
      "\tstatic get properties() {",
      "\t\treturn {",
      "\t\t\t$0",
      "\t\t}",
      "\t}",
      "",
      "\tconstructor() {",
      "\t\tsuper();",
      "\t}",
      "",
      "\tready() {",
      "\t\tsuper.ready();",
      "",
      "\t\t// When possible, use afterNextRender to defer non-critical",
      "\t\t// work until after first paint.",
      "\t\tPolymer.RenderStatus.afterNextRender(this, function() {",
      "\t\t\t",
      "\t\t});",
      "\t}",
      "",
      "}",
      "",
      "window.customElements.define(${1:Name}Element.is, ${1:Name}Element);"
    ]
  },
  "Polymer Observers": {
    "prefix": "p-observers",
    "description": "Polymer observers()",
    "body": [
      "static get observers() {",
      "\treturn [",
      "\t\t'$1Changed($0)'",
      "\t];",
      "}"
    ]
  },
  "Polymer Constructor": {
    "prefix": "p-lifecycle-constructor",
    "description": "Polymer constructor()",
    "body": [
      "constructor() {",
      "\tsuper();",
      "",
      "\t$0",
      "",
      "}"
    ]
  },
  "Web Components v1 connectedCallback": {
    "prefix": "p-lifecycle-connected",
    "description": "Web Components v1 connectedCallback()",
    "body": [
      "connectedCallback() {",
      "\tsuper.connectedCallback();",
      "",
      "\t$0",
      "",
      "}"
    ]
  },
  "Web Components v1 disconnectedCallback": {
    "prefix": "p-lifecycle-disconnected",
    "description": "Web Components v1 disconnectedCallback ()",
    "body": [
      "disconnectedCallback() {",
      "\tsuper.disconnectedCallback();",
      "",
      "\t$0",
      "",
      "}"
    ]
  },
  "Web Components v1 attributeChangedCallback ": {
    "prefix": "p-lifecycle-attrchanged",
    "description": "Web Components v1 attributeChangedCallback()",
    "body": [
      "attributeChangedCallback(attrName, oldVal, newVal) {",
      "",
      "\t$0",
      "",
      "}"
    ]
  },
  "Polymer ready": {
    "prefix": "p-lifecycle-ready",
    "description": "Polymer specific ready()",
    "body": [
      "ready() {",
      "\tsuper.ready();",
      "",
      "\t// When possible, use afterNextRender to defer non-critical",
      "\t// work until after first paint.",
      "\tPolymer.RenderStatus.afterNextRender(this, function() {",
      "\t\t$0",
      "\t});",
      "",
      "}"
    ]
  },
  "Polymer DispatchEvent": {
    "prefix": "p-dispatchevent",
    "description": "Fire custom event",
    "body": [
      "this.dispatchEvent(new CustomEvent('$1', {",
      "\tdetail: {", 
      "\t\t$0",
      "\t}",
      "}));"
    ]
  },
  "Polymer DispatchEvent Thought ShadowDOM": {
    "prefix": "p-dispatchevent-composed",
    "description": "Fire custom event throught shadow DOM boundaries",
    "body": [
      "this.dispatchEvent(new CustomEvent('$1', {",
      "\tbubbles: true,",
      "\tcomposed: true,",
      "\tdetail: {", 
      "\t\t$0",
      "\t}",
      "}));"
    ]
  },
  "Polymer Decalre Property - Type and Default Value": {
    "prefix": "p-property-basic",
    "description": "Add property with type and default value.",
    "body": [
      "/**",
      " * ${4:Description for prop}",
      " */",
      "${1:PropertyName}: {",
      "\ttype: ${2:Boolean|Date|Number|String|Array|Object},",
      "\tvalue: ${3:boolean|number|string|function}",
      "}"   
    ]
  },
  "Polymer Declare Property - All Keys": {
    "prefix": "p-property-all",
    "description": "Add property with all keys",
    "body": [
      "/**",
      " * ${9:Description for prop}",
      " */",
      "${1:PropertyName}: {",
      "\ttype: ${2:Boolean|Date|Number|String|Array|Object},",
      "\tvalue: ${3:boolean|number|string|function},",
      "\treflectToAttribute: ${4:boolean},",
      "\treadOnly: ${5:boolean},",
      "\tnotify: ${6:boolean},",
      "\tcomputed: ${7:string},",
      "\tobserver: ${8:string}",
      "}"   
    ]
  }
}