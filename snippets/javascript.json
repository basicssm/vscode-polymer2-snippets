{
  "Polymer Custom Element": {
    "prefix": "p-customelement",
    "description": "Polymer custom element",
    "body": [
      "/**",
      " * `${2:LowerCaseDashedName}` ${3:Description}",
      " *",
      " * @summary ${4:ShortDescription}.",
      " * @customElement",
      " * @polymer",
      " * @extends {Polymer.Element}",
      " */",
      "class ${1:PascalCaseName} extends Polymer.Element {",
      "\t/**",
      "\t * String providing the tag name to register the element under.",
      "\t */",
      "\tstatic get is() {",
      "\t\treturn '${2:LowerCaseDashedName}';",
      "\t}",
      "",
      "\t/**",
      "\t * Object describing property-related metadata used by Polymer features",
      "\t */",
      "\tstatic get properties() {",
      "\t\treturn {",
      "\t",
      "};",
      "\t}",
      "",
      "\t/**",
      "\t * Instance of the element is created/upgraded. Use: initializing state,",
      "\t * set up event listeners, create shadow dom.",
      "\t * @constructor",
      "\t */",
      "\tconstructor() {",
      "\t\tsuper();",
      "\t}",
      "",
      "\t/**",
      "\t * Use for one-time configuration of your component after local DOM is initialized. ",
      "\t */",
      "\tready() {",
      "\t\tsuper.ready();",
      "",
      "\t\tPolymer.RenderStatus.afterNextRender(this, function() {",
      "\t\t\t",
      "\t\t});",
      "\t}",
      "",
      "}",
      "",
      "window.customElements.define(${1:PascalCaseName}.is, ${1:PascalCaseName});"
    ]
  },
  "Polymer Hybrid Behaviors": {
    "prefix": "p-hybridbehaviors",
    "description": "Add hybrid behaviors to your class-style element",
    "body": [
      "Polymer.mixinBehaviors([$0], Polymer.Element)"
    ]
  },
  "Polymer Properties": {
    "prefix": "p-properties",
    "description": "Polymer properties()",
    "body": [
      "/**",
      "  * Object describing property-related metadata used by Polymer features",
      "  */",
      "static get properties() {",
      "\treturn {",
      "\t\t$0",
      "\t};",
      "}"
    ]
  },
  "Polymer Observers": {
    "prefix": "p-observers",
    "description": "Polymer observers()",
    "body": [
      "/**",
      "  * Array of strings describing multi-property observer methods and their",
      "  * dependant properties",
      "  */",
      "static get observers() {",
      "\treturn [",
      "\t\t'$1Changed($0)'",
      "\t];",
      "}"
    ]
  },
  "Polymer Constructor": {
    "prefix": "p-lifecycle-constructor",
    "description": "Polymer constructor()",
    "body": [
      "/**",
      "  * Instance of the element is created/upgraded. Useful for initializing",
      "  * state, set up event listeners, create shadow dom.",
      "  * @constructor",
      "  */",
      "constructor() {",
      "\tsuper();",
      "",
      "\t$0",
      "",
      "}"
    ]
  },
  "Web Components v1 connectedCallback": {
    "prefix": "p-lifecycle-connected",
    "description": "Web Components v1 connectedCallback()",
    "body": [
      "/**",
      "  * Called every time the element is inserted into the DOM. Useful for ",
      "  * running setup code, such as fetching resources or rendering.",
      "  * Generally, you should try to delay work until this time.",
      "  */",
      "connectedCallback() {",
      "\tsuper.connectedCallback();",
      "",
      "\t$0",
      "",
      "}"
    ]
  },
  "Web Components v1 disconnectedCallback": {
    "prefix": "p-lifecycle-disconnected",
    "description": "Web Components v1 disconnectedCallback ()",
    "body": [
      "/**",
      "  * Called every time the element is removed from the DOM. Useful for ",
      "  * running clean up code (removing event listeners, etc.).",
      "  */",
      "disconnectedCallback() {",
      "\tsuper.disconnectedCallback();",
      "",
      "\t$0",
      "",
      "}"
    ]
  },
  "Web Components v1 attributeChangedCallback": {
    "prefix": "p-lifecycle-attrchanged",
    "description": "Web Components v1 attributeChangedCallback()",
    "body": [
      "/**",
      "  * An attribute was added, removed, updated, or replaced. Also called for",
      "  * initial values when an element is created by the parser, or upgraded.",
      "  * Note: only attributes listed in the observedAttributes property will",
      "  * receive this callback. ",
      "  */",
      "attributeChangedCallback(attrName, oldVal, newVal) {",
      "",
      "\t$0",
      "",
      "}"
    ]
  },
  "Polymer ready": {
    "prefix": "p-lifecycle-ready",
    "description": "Polymer specific ready()",
    "body": [
      "/**",
      " * Use for one-time configuration of your component after local DOM is",
      " * initialized.",
      " */",
      "ready() {",
      "\tsuper.ready();",
      "",
      "\t// When possible, use afterNextRender to defer non-critical",
      "\t// work until after first paint.",
      "\tPolymer.RenderStatus.afterNextRender(this, function() {",
      "\t\t$0",
      "\t});",
      "",
      "}"
    ]
  },
  "Polymer DispatchEvent": {
    "prefix": "p-dispatchevent",
    "description": "Fire custom event",
    "body": [
      "this.dispatchEvent(new CustomEvent('$1', {",
      "\tdetail: {",
      "\t\t$0",
      "\t}",
      "}));"
    ]
  },
  "Polymer DispatchEvent Thought ShadowDOM": {
    "prefix": "p-dispatchevent-composed",
    "description": "Fire custom event throught shadow DOM boundaries",
    "body": [
      "this.dispatchEvent(new CustomEvent('$1', {",
      "\tbubbles: true,",
      "\tcomposed: true,",
      "\tdetail: {",
      "\t\t$0",
      "\t}",
      "}));"
    ]
  },
  "Polymer Declare Property - Type and Default Value": {
    "prefix": "p-property-basic",
    "description": "Add property with type and default value.",
    "body": [
      "/**",
      " * ${4:Description for prop}",
      " */",
      "${1:PropertyName}: {",
      "\ttype: ${2:Boolean|Date|Number|String|Array|Object},",
      "\tvalue: ${3:boolean|number|string|function},",
      "},"
    ]
  },
  "Polymer Declare Property - Type, Default Value, Observer": {
    "prefix": "p-property-observer",
    "description": "Add property with type, default value, and observer.",
    "body": [
      "/**",
      " * ${5:Description for prop}",
      " */",
      "${1:PropertyName}: {",
      "\ttype: ${2:Boolean|Date|Number|String|Array|Object},",
      "\tvalue: ${3:boolean|number|string|function},",
      "\tobserver: '${4:string}',",
      "},"
    ]
  },
  "Polymer Declare Property - Typem Computed": {
    "prefix": "p-property-computed",
    "description": "Add property with type and computed.",
    "body": [
      "/**",
      " * ${5:Description for prop}",
      " */",
      "${1:PropertyName}: {",
      "\ttype: ${2:Boolean|Date|Number|String|Array|Object},",
      "\tcomputed: '${4:string}',",
      "},"
    ]
  },
  "Polymer Declare Property - All Keys": {
    "prefix": "p-property-all",
    "description": "Add property with all keys",
    "body": [
      "/**",
      " * ${9:Description for prop}",
      " */",
      "${1:PropertyName}: {",
      "\ttype: ${2:Boolean|Date|Number|String|Array|Object},",
      "\tvalue: ${3:boolean|number|string|function},",
      "\treflectToAttribute: ${4:boolean},",
      "\treadOnly: ${5:boolean},",
      "\tnotify: ${6:boolean},",
      "\tcomputed: ${7:string},",
      "\tobserver: ${8:string},",
      "},"
    ]
  }
}